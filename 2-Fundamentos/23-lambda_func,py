# Função de potência de um número
power = lambda num: num ** 2

print(power(5))
print(power(9))

# Função que verifica se o número é par
is_even = lambda x: x % 2 == 0

print(is_even(27))
print(is_even(30))

# Função que divide um número por outro
div_num = lambda x, y: x / y

print(div_num(10,2))
print(div_num(6,2))

# Função que inverte uma string
reverse_string = lambda s: s[::-1]
print(reverse_string("calendario"))

# Funcionalidades relacionadas aos filmes:
movie_list = ["Titanic", "The Godfather", "Inception", "Jurassic Park", "The Matrix" ]
ratings = {
    "Titanic": [8.5, 9.0, 7.5],
    "The Godfather": [9.5, 9.8, 8.0],
    "Inception": [8.0, 8.5, 7.0],
    "Jurassic Park": [7.5, 7.0, 8.0],
    "The Matrix": [8.8, 9.2, 8.5],
}

# Função para calcular a média de avaliações de um filme
average_rating = lambda movie_name: sum(ratings[movie_name]) / len(ratings[movie_name])

print(f"Média de Avaliação do filme Titanic: {average_rating("Titanic"):.2f}")
print(f"Média de Avaliação do filme The Godfather: {average_rating("The Godfather"):.2f}")
print(f"Média de Avaliação do filme Inception: {average_rating("Inception"):.2f}")
print(f"Média de Avaliação do filme Jurassic Park: {average_rating("Jurassic Park"):.2f}")
print(f"Média de Avaliação do filme The Matrix: {average_rating("The Matrix"):.2f}")

# Função que verifica se um filme está na lista
check_movie = lambda movie_name: movie_name in movie_list

print(f"Inception está na lista? {check_movie("Inception")}")

#Função para recomendar um filme com 
#base na avaliação média
recommend_movie = lambda movie_name: f"Recomendo assistir {movie_name} com média de {average_rating(movie_name):.2f}"
#print(f"{recommend_movie("Titanic")}")

print("\n--- Filmes Altamente Recomendados (Média > 8.5) ---")
for movie in movie_list:
    if average_rating(movie) > 8.5:
        print(recommend_movie(movie))